---
# tasks file for borgbackup


# Подключаем EPEL репозиторий с дополнительными пакетами
- name: BorgBackup | Install EPEL Repo package from standart repo
  yum:
    name: epel-release
    state: present
  tags:
    - epel-package
    - packages

# Устанавливаем на client и backup сервере borgbackup
- name: BorgBackup | Install BorgBackup package from EPEL Repo
  yum:
    name: borgbackup
    state: latest
  tags:
    - borgbackup-package
    - packages

# На сервере backup создаем пользователя и каталог /var/backup (в
# домашнем задании нужно будет создать диск ~2Gb и
# примонтировать его) и назначаем на него права пользователя borg
- block: # ----- Backup Server ----
# Get IP address of backup server
  - name: Get IP address of backup server
    vars: backup_ip_addr={{ ansible_eth1.ipv4.address }}
#   backup_ip_addr: 192.168.50.160

  - name: Backup | IP address
    debug: msg="{{ backup_ip_addr }}"
    tags:
      - backup-ip-address
  
  - name: Add user borg to Backup Server
    user: name=borg shell=/bin/bash  password=''
    tags:
      - add-user

#  - name: Fetch UID borg user
#    command: id -u borg
#    register: uid_borg

#  - name: Fetch GID borg group
#    command: id -g borg
#    register: gid_borg

  - name: Create Backup Directory
    file: path=/var/backup state=directory owner=borg group=borg mode=0755
    tags:
      - create-backup-dir

  - name: Create a new primary partition
    parted:
      device: /dev/sdb
      number: 1
      state: present
    tags:
      - create-prim-part

  - name: Create a xfs filesystem on /dev/sdb
    filesystem:
      fstype: xfs
      dev: /dev/sdb1
    tags:
      - craete-xfs
      
  - name: Fetch the UUID of /dev/sdb1
    command: blkid -s UUID -o value /dev/sdb1
    changed_when: false
    register: blkid_sdb1

#  - name: Mount up device /dev/sdb1 by UUID
#    mount:
#      path: /var/backup
#      src: UUID={{ blkid_sdb1.stdout }}
#      fstype: xfs
#      opts: defaults,uid={{ uid_borg.stdout }},gid={{ gid_borg.stdout }}
#      state: present

  - name: Template var-backup.mount to SystemD
    template: src=var-backup.mount.j2 dest=/etc/systemd/system/var-backup.mount mode=0644
    notify:
      - Start and Enable var-backup.mount

  - name: Copy SystemD Files
    copy: src={{ item }} dest=/etc/systemd/system mode=0644
    loop:
      - "set_var-backup_owner.service"
    notify:
      - Start and Enable set_var-backup_owner.service

# На сервер backup создаем каталог ~/.ssh/authorized_keys в каталоге /home/borg
  - name: Create directory ~/.ssh/
    file: path=/home/borg/.ssh state=directory owner=borg group=borg mode=0700
    tags:
      - create-ssh-dir

  - name: Create authorized_keys file
    file: path=/home/borg/.ssh/authorized_keys state=touch owner=borg group=borg mode=0600
    tags:
      - create_authorized_keys
  when: ansible_hostname == "backup"

# На client генерируем ssh-ключ и добавляем его на сервер backup в
# файл authorized_keys созданным на прошлом шаге
- block: # ----- Client Server -----
# Get IP address of backup server
  - name: Get IP address of client server
    vars: client_ip_addr={{ ansible_eth1.ipv4.address }}
#   client_ip_addr: 192.168.50.150

  - name: Client | IP address
    debug: msg="{{ client_ip_addr }}"
    tags:
      - client-ip-address

  - name: Generate SSH Key in Client Server
    shell: ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y # >/dev/null 2>&1
    tags:
      - generate_ssh_key

  - name: Fetch Public SSH Key
    command: cat /root/.ssh/id_rsa.pub
    register: pub_ssh_key
    tags:
      - backup_authorized_keys

#  - name: check keys
#    debug: msg="{{ pub_ssh_key.stdout }}"
#    tags:
#      - backup_authorized_keys

  - name: Copy SSH Key to Backup Server
    authorized_key: user=borg key="{{ pub_ssh_key.stdout }}"
    delegate_to: "backup"
    tags:
      - backup_authorized_keys

  - name: Create SSH config file for current user
    file: path=/root/.ssh/config state=touch owner=root group=root mode=0600

  - name: Insert text to SSH config file
    lineinfile: 
      dest: /root/.ssh/config 
      regexp: '^'
      line: "Host {{ backup_ip_addr }}\n  StrictHostKeyChecking=no\n  UserKnownHostsFile=/dev/null"
      state: present

# Инициализируем репозиторий borg на backup сервере с client сервера
  - name: Initialization Borg Backup Repo in Backup Server
    command: borg init -e repokey
    environment:
      BORG_REPO: "borg@{{ backup_ip_addr }}:/var/backup/"
      BORG_PASSPHRASE: "Otus1234"
    tags:
      - borg-repo-init

# Автоматизируем создание бэкапов с помощью systemd
# Создаем сервис и таймер в каталоге /etc/systemd/system/
  - name: Template var-backup.mount to SystemD
    template: src=borg-backup.service.j2 dest=/etc/systemd/system/borg-backup.service mode=0644
    tags:
      - borg-backup-systemd
      
  - name: Copy SystemD Files
    copy: src={{ item }} dest=/etc/systemd/system mode=0644
    loop:
      - "borg-backup.timer"
    notify:
      - Start and Enable borg-backup.timer
    tags:
      - borg-backup-systemd
  when: ansible_hostname == "client"

